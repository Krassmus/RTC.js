{"name":"Rtc.js","tagline":"A webRTC library that should make an webRTC as easy as jQuery.ajax.","body":"API of RTC.js\r\n=============\r\n\r\n## RTC.Connection\r\n\r\nRTC.Connection is a class so that you can establish a connection by calling \r\n\r\n```\r\nvar connection = new RTC.Connection({\r\n    'myvideo': document.getElementById(\"#me_smiling_in_the_cam\"),\r\n    'video': document.getElementById(\"#remoteuser_smiling_in_the_cam\"),\r\n    'sendOffer': function (offer) {\r\n        //and here we send the offer right sto our signalling server\r\n        jQuery.ajax({\r\n            'url': \"https://myserver/signaling/start\",\r\n            'data': {\r\n                'offer_sdp': offer\r\n            }\r\n        });\r\n    }\r\n});\r\n```\r\n\r\nThe following tables describe all options\r\n\r\n| option  | expected | effect |\r\n| --------|:--------:|--------|\r\n| **`sendOffer`** | function (sdp) {...} | This function is called to start signaling. The first and only parameter is the SDP-string and it is up to YOU to deliver that to the other side of the connection. For each connection you should either define `sendOffer` or `offer`. |  |\r\n| **`offer`** | string | If you just received an offer, take the SDP-string and build a connection with it to answer it. This parameter ist just the pure SDP string. |\r\n| **`sendAnswer`** | function (sdp) {...} | This function is called in the middle of signaling by the side/peer that just received an offer. The first and only parameter is the SDP-string and it is up to YOU to deliver that to the other side of the connection. Once you have done that on the other side you must call insertAnswer on the RTC.Connection object that created the offer in the first place. For each connection you should either define `sendOffer` or `offer`. |  |\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}