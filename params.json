{"name":"RTC.js","tagline":"A webRTC library that should make an webRTC as easy as jQuery.ajax.","body":"API of RTC.js\r\n=============\r\n\r\n## RTC.Connection\r\n\r\nRTC.Connection is a class so that you can establish a connection by calling \r\n\r\n```\r\nvar connection = new RTC.Connection({\r\n    'localstream': document.getElementById(\"#me_smiling_in_the_cam\"),\r\n    'video': document.getElementById(\"#remoteuser_smiling_in_the_cam\"),\r\n    'sendOffer': function (offer) {\r\n        //and here we send the offer right sto our signalling server\r\n        jQuery.ajax({\r\n            'url': \"https://myserver/signaling/start\",\r\n            'data': {\r\n                'offer_sdp': offer\r\n            }\r\n        });\r\n    }\r\n});\r\n```\r\n\r\nThe following tables describe all options\r\n\r\n| option  | expected | effect |\r\n| --------|:--------:|--------|\r\n| **`sendOffer`** | function | This function is called to start signaling. The first and only parameter is the SDP-string and it is up to YOU to deliver that to the other side of the connection. For each connection you should either define `sendOffer` or `offer`. |  |\r\n| **`offer`** | string | If you just received an offer, take the SDP-string and build a connection with it to answer it. This parameter ist just the pure SDP string. |\r\n| **`sendAnswer`** | function | This function is called in the middle of signaling by the side/peer that just received an offer. The first and only parameter is the SDP-string and it is up to YOU to deliver that to the other side of the connection. Once you have done that on the other side you must call insertAnswer on the RTC.Connection object that created the offer in the first place. For each connection you should either define `sendOffer` or `offer`. |  |\r\n\r\n### Methods of RTC.Connection\r\n\r\nOnce you called `new RTC.Connection(...)` you get an object back. And this object has some important methods that are used to finish establishing the connection or send data-objects to the other side. So don't throw your object into the garbage collector, you will need it again, once you created it.\r\n\r\n| method | parameter | effect |\r\n|--------|:---------:|--------|\r\n| **`insertAnswer`** | string | This is called for RTC.Connection objects that once created an offer. By calling `insertAnswer(answer_sdp)` you finish establishing the connection. Right after that the `established`-event is fired and after that you can start to communicate with each other, the video or audio streams should appear, you can send messages with the `send` method. |\r\n| **`send`** | JSON-object, string, integer | Once a connection is established you can send any kind of JSON-objects to the other side with this method. On the other side for each object the event `received` will get fired. |\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}